{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>QuineOS is a single-purpose Android operating system designed specifically for 3D printers. By leveraging the power and flexibility of LineageOS, QuineOS brings new life to old Android smartphones, transforming them into powerful and customizable 3D printer controllers. Featuring a robust, open-source software stack and hackable architecture, QuineOS is the ultimate solution for 3D printing enthusiasts looking to make the most out of their devices and elevate their 3D printing experience.</p> <p></p>"},{"location":"#overview-of-quineos","title":"Overview of QuineOS","text":"<p>At the heart of QuineOS is the commitment to breathe new life into the Android smartphones that are collecting dust in drawers around the world. By supporting any device that LineageOS is compatible with, QuineOS offers a unique opportunity for users to repurpose old hardware into state-of-the-art 3D printer controllers.</p> <p>QuineOS combines the best of open-source technology, taking advantage of a unique combination of Docker and Android. It offers a fully integrated Klipper stack out of the box. With Klipper, Moonraker, Mainsail, and KlipperScreen working in harmony, you can connect to your printer MCU boards via USB serial or CANbus giving you the best 3D print setup almost for free. Since it's all open and documented, you can easily install additional Android apps or Docker containers to expand the functionality of a QuineOS-powered 3D printer.</p>"},{"location":"#features-and-benefits","title":"Features and benefits","text":""},{"location":"#fully-klipper-stack","title":"Fully klipper stack","text":"<p>The Core of QuineOS is a set of Docker containers running an opininated Klipper stack. Currently, the stack is setup with Mainsail as the web frontend, KlipperScreen as the on Phone interface, Moonraker for the API and Klipper obviously for the print controller. There are also options to swap out the web frontend for Octoprint or Fluidd but this has not been fully tested.</p>"},{"location":"#secure-remote-connectivity-and-control","title":"Secure remote connectivity and control","text":"<p>QuineOS offers a myriad of connection options. For remote access, it includes Tailscale VPN preinstalled and this coupled with a VNC app allows nearly complete secure remote control of the system. Locally, QuineOS also offers up a SSH connection on port <code>8022</code> and additionally sets up mDNS so that your printer is discoverable as <code>android.local</code> in the local network.</p>"},{"location":"#supported-devices","title":"Supported devices","text":"<p>Currently QuineOS has only been ported to the following devices: - Google Pixel 4a (sunfish) - OnePlus 5 (dumpling)</p> <p>But it should be fairly quick and easy to port and build for any other phones that currently have support for LineageOS 20.0. If you want your phone supported, drop an issue on the issues list here: https://github.com/projectquine/quineOS/issues</p>"},{"location":"#canbus-and-serial-control-board-support","title":"Canbus and serial control board support","text":"<p>QuineOS sets up and configures serial and CANbus support so that it works out of the box. Currently known tested boards are:</p>"},{"location":"#serial","title":"Serial:","text":"<ul> <li>BigTreeTech Octopus v1.1</li> <li>Sovol SV04 Idex printer which is based on the <code>Creality \"v5.2.1\" board</code></li> </ul>"},{"location":"#canbus","title":"CANbus:","text":"<ul> <li>Mellow Fly VORON-SB2040</li> <li>HUVUD toolboard</li> <li>BIGTREETECH EBB 36/42 Can Bus U2C V2.1 for USB to CANbus.</li> <li>Mellow FLY-UTOC-1 for USB to CANbus.</li> <li>RPI pico (RP2040), but this needs an addtional CAN transceiver board like this. </li> </ul>"},{"location":"#limitations-and-known-issues","title":"Limitations and known issues","text":"<ul> <li>On some 4.4 kernel devices containers only will run with <code>--ipc=host</code></li> <li>Occasionally docker daemon will not start correctly as it can't connect to the runc socket, reboot should fix that. [we are actively debugging]</li> <li>klipperScreen starts in wrong orientation or only uses half screen. Need to run <code>docker restart prind-klipperscreen-1</code></li> <li>android.local services fail sometime after boot. [we are actively debugging]</li> <li>Currently the OS images are not signed but this will be done once out of ALPHA state.</li> <li>Occasionally when running a print and full VNC remote session the phone will hit a over heating warning and throttle its CPU to compensate.</li> <li>Constantly charging a phone battery can be a risk to destroying the battery, so we recommend a setup which would periodically stop the charger for the phone.</li> </ul>"},{"location":"1-getting-started/","title":"Getting Started","text":""},{"location":"1-getting-started/#requirements","title":"Requirements","text":"<ol> <li>Compatible device (Google Pixel 4a, OnePlus 5T)</li> <li>3D Printer with compatible control board</li> <li>Necessary cables and accessories</li> </ol>"},{"location":"1-getting-started/#installation","title":"Installation","text":"<ol> <li>LineageOS documentation overview</li> <li>Downloading QuineOS</li> <li>Flashing QuineOS on the device</li> <li>Powering up and initial setup</li> </ol>"},{"location":"2-setup/","title":"Configuration and Setup","text":""},{"location":"2-setup/#connecting-quineos-to-your-3d-printer","title":"Connecting QuineOS to your 3D printer","text":""},{"location":"2-setup/#canbus-connection","title":"Canbus connection","text":""},{"location":"2-setup/#serial-connection","title":"Serial connection","text":""},{"location":"2-setup/#klipper-stack-configuration","title":"Klipper stack configuration","text":""},{"location":"2-setup/#klipper","title":"Klipper","text":""},{"location":"2-setup/#moonraker","title":"Moonraker","text":""},{"location":"2-setup/#mainsail","title":"Mainsail","text":""},{"location":"2-setup/#klipperscreen","title":"KlipperScreen","text":""},{"location":"2-setup/#remote-connectivity-and-control","title":"Remote connectivity and control","text":""},{"location":"2-setup/#vnc-setup","title":"VNC setup","text":""},{"location":"2-setup/#tailscale-setup","title":"Tailscale setup","text":""},{"location":"3-architecture/","title":"Architecture","text":""},{"location":"3-architecture/#pre-installed-apps","title":"Pre-installed Apps","text":""},{"location":"3-architecture/#quinelauncher","title":"QuineLauncher","text":"<p>QuineLauncher is the default home and launcher for QuineOS and surfaces only the necessary apps to the user. It is also responsible for starting various services and apps to give the OS its functionality. </p>"},{"location":"3-architecture/#termux-environment","title":"Termux Environment","text":"<p>The Termux environment is where the bulk of software runs. This is where we launch the docker containers to run klipper. Generally, the termux app does the following:</p> <ul> <li>packages included in termux bootstrap:<ul> <li>root-repo, tsu, git, wget, openssh, openssl, can-utils, quine-runtime</li> <li>quine-runtime should install <code>$PREFIX/etc/profile.d/first-boot.sh</code> script.</li> </ul> </li> <li><code>$PREFIX/etc/profile.d/first-boot.sh</code> will do the following on first boot.<ul> <li>writes all the start scripts into <code>.termux/boot/</code>.  One of which also grabs wakelock.</li> <li>check if we have sudo yet, wait and keep trying if not.</li> <li>check if we have internet access, wait and keep trying if not.</li> <li>generate ssh keys: <code>ssh-keygen -A</code></li> <li>set default password: <code>yes quine | passwd</code></li> <li>checks if <code>/opt/quine</code> folder exists, if it doesn't then <code>git clone https://github.com/projectquine/quine-runtime.git</code> and run install.</li> <li>deletes itself afterward so does not re-run.</li> </ul> </li> <li>quine-runtime:<ul> <li>should be in /opt</li> <li>install all needed packages:<ul> <li>docker, docker-compose, xorg-server-xvfb, x11.deb</li> </ul> </li> <li>pull all needed containers:<ul> <li>docker-compose pull prind stuff</li> </ul> </li> <li>install scripts we use in <code>/opt/quine/</code><ul> <li>start-docker.sh: sets up mounts and launches dockerd daemon</li> <li>setup-docker-networking.sh:  setup dockerd network and is run before start-docker.sh </li> <li>watch-tty.sh: monitors /dev for ttyUSB and ttyACM devices and mounts the first one found to /dev/klipper.</li> <li>start-xorg.sh: start xvfb and termux-x11 processes to make use of x11 app.</li> <li>start-prind.sh: waits for docker daemon to be ready and then starts prind with docker-compose up.</li> </ul> </li> </ul> </li> </ul> <p>We also then have two termux extension apps, namely:</p> <ul> <li>Termux:boot</li> <li>Termux:x11</li> </ul> <p>Termux:boot ensure that the Termux environment is started up at boot and our initialisation scripts are started.</p> <p>Termux:x11 provides a X11 server to display klipperScreen on the phones screen.</p>"},{"location":"3-architecture/#quinecamera","title":"QuineCamera","text":"<p>A standalone app that grabs the front or back camera video stream and serves it as an MJPEG stream via http on the configured port (default: 8080)</p>"},{"location":"3-architecture/#additional-apps","title":"Additional Apps","text":"<ul> <li>DroidVNC</li> <li>TailScale</li> </ul>"},{"location":"3-architecture/#kernel-modifications","title":"kernel modifications","text":"<ul> <li>configs for docker</li> <li>configs for canbus</li> <li>configs for serial usb</li> </ul>"},{"location":"4-adding-new-device/","title":"Adding Support for Additional Android Devices","text":""},{"location":"4-adding-new-device/#device-compatibility-guidelines","title":"Device compatibility guidelines","text":""},{"location":"4-adding-new-device/#steps-to-add-support-for-a-new-device","title":"Steps to add support for a new device","text":""},{"location":"4-adding-new-device/#community-contributions-and-support","title":"Community contributions and support","text":""},{"location":"4-troubleshooting/","title":"Troubleshooting","text":""},{"location":"4-troubleshooting/#common-issues-and-solutions","title":"Common issues and solutions","text":""},{"location":"4-troubleshooting/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"4-troubleshooting/#seeking-community-support-and-assistance","title":"Seeking community support and assistance","text":""}]}